  @scala.annotation.tailrec                                                               
  def foldLeft[A, B](l: List[A], z: B)(f: (B, A) => B): B =                               
    l match {                                                                             
      case Nil         => z                                                               
      case Cons(x, xs) => foldLeft(xs, f(z, x))(f)                                        
    }      


foldRight(Cons(1, Cons(2, Cons(3, Nil))), 0)(_ + _)
1 + foldRight(Cons(2, Cons(3, Nil)), 0)(_ + _)
1 + 2 + foldRight(Cons(3, Nil), 0)(_ + _)
1 + 2 + 3 + foldRight(Nil, 0)(_ + _)
1 + 2 + 3 + 0 = 6


foldLeft(Cons(1, Cons(2, Cons(3, Nil))), 0)(_ + _)
foldLeft(Cons(2, Cons(3, Nil)), 0 + 1)(_ + _)
foldLeft(Cons(3, Nil), 0 + 1 + 2)(_ + _)
foldLeft(Nil, 0 + 1 + 2 + 3)(_ + _)
0 + 1 + 2 + 3 = 6

foldLeft(Cons(1, Cons(2, Cons(3, Nil))), Nil)((accum, elem) => Cons(elem, accum))
foldLeft(Cons(2, Cons(3, Nil)), Cons(1, Nil))((accum, elem) => Cons(elem, accum))
foldLeft(Cons(3, Nil), Cons(2, Cons(1, Nil)))((accum, elem) => Cons(elem, accum))
foldLeft(Nil, Cons(3, Cons(2, Cons(1, Nil))))((accum, elem) => Cons(elem, accum))
Cons(3, Cons(2, Cons(1, Nil)))
